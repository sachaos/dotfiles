export TERM=xterm-256color

# Editor
export EDITOR='emacsclient -nw -a ""'

autoload -Uz colors
colors

export HISTFILE=${HOME}/.zsh_history
export HISTSIZE=10000
export SAVEHIST=1000000

setopt share_history

function chpwd() {
    if [ ! -z $TMUX ]; then
        tmux refresh-client -S
    fi
}

function precmd() {
    if [ ! -z $TMUX ]; then
        tmux refresh-client -S
    fi
}

##########################################################
## pet
##########################################################
function pet-exec() {
    pet exec
}
zle -N pet-exec
bindkey '^x^r' pet-exec

##########################################################
## peco functions
##########################################################

# peco ghq list
function peco-ghq-list() {
    local SELECTED_DIR=$(ghq list | peco --query "$LBUFFER")
    if [ -n "$SELECTED_DIR" ]; then
        local NEW_LEFT="cd $(ghq root)/${SELECTED_DIR}"
        BUFFER=${NEW_LEFT}${RBUFFER}
        CURSOR=${#NEW_LEFT}
    fi
}
zle -N peco-ghq-list
bindkey '^xd' peco-ghq-list

# peco history
function peco-select-history() {
    typeset tac
    if which tac > /dev/null; then
        tac=tac
    else
        tac='tail -r'
    fi
    BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle redisplay
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# peco build from history
function peco-build-from-history() {
    local current_buffer=$BUFFER
    typeset tac
    if which tac > /dev/null; then
        tac=tac
    else
        tac='tail -r'
    fi

    local selected_command="$(fc -l -n 1 | eval $tac | peco)"
    if [ -n "$selected_command" ]; then
        BUFFER="${current_buffer}${selected_command}"
        CURSOR=$#BUFFER
    fi
    zle clear-screen
}
zle -N peco-build-from-history
bindkey '^xr' peco-build-from-history

# peco find
function peco-find() {
    local current_buffer=$BUFFER
    # .git系など不可視フォルダは除外
    local selected_file="$(find . -maxdepth 8 ! -path "*/.git*" ! -path "*/node_modules/*"  | grep -v '~$' | sort | peco | sed -e "s/)/\\\)/g" -e "s/(/\\\(/g" -e "s/\ /\\\ /g" -e "s/#/\\\#/g" | tr '\n' ' ')"
    if [ -n "$selected_file" ]; then
        BUFFER="${current_buffer} ${selected_file}"
        CURSOR=$#BUFFER
    fi
    zle clear-screen
}
zle -N peco-find
bindkey '^x^f' peco-find

# peco directory select
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000 # cdrの履歴を保存する個数
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

function peco-cdr () {
    local selected_dir=$(cdr -l | awk '{print $2}' | peco)
    if [ -n "$selected_dir" ]; then
        local new_left="cd ${selected_dir}"
        BUFFER=${new_left}${RBUFFER}
        CURSOR=${#new_left}
    fi
}
zle -N peco-cdr
bindkey '^xi' peco-cdr

# peco kill
function peco-kill-process() {
  ps -ef | peco | awk '{print $2}' | xargs kill
  zle clear-screen
}
zle -N peco-kill-process
bindkey '^xk' peco-kill-process

function peco-kill-process-force() {
    ps -ef | peco | awk '{print $2}' | xargs kill -9
    zle clear-screen
}
zle -N peco-kill-process-force
bindkey '^xK' peco-kill-process-force

# peco で github の branchを選択
function peco-branch () {
  local branch=$(git branch -a | peco | tr -d ' ' | tr -d '*')
  if [ -n "$branch" ]; then
    if [ -n "$LBUFFER" ]; then
      local new_left="${LBUFFER%\ } $branch"
    else
      local new_left="$branch"
    fi
    BUFFER=${new_left}${RBUFFER}
    CURSOR=${#new_left}
  fi
}
zle -N peco-branch
bindkey '^g^b' peco-branch

# pecoでgit add
function peco-select-gitadd() {
    local SELECTED_FILE_TO_ADD="$(git status --porcelain | \
                                  peco --query "$LBUFFER" | \
                                  awk -F ' ' '{print $NF}')"
    if [ -n "$SELECTED_FILE_TO_ADD" ]; then
        local BUFFER="git add"
        GIT_DIR=$(git rev-parse --show-cdup)

        while read -r file; do
            BUFFER="${BUFFER} ${GIT_DIR}$(echo $file | tr '\n' ' ')"
        done <<< "$SELECTED_FILE_TO_ADD"
        CURSOR=$#BUFFER
    fi
}
zle -N peco-select-gitadd
bindkey "^g^a" peco-select-gitadd

# pecoでgemのファイルを選択
function peco-gem () {
  local file_path=$(gem which $(gem list -q | peco) 2>/dev/null)
  echo $file_path
  if [ -n "$file_path" ]; then
    if [ -n "$LBUFFER" ]; then
      local new_left="${LBUFFER%\ } $file_path"
    else
      local new_left="$file_path"
    fi
    BUFFER=${new_left}${RBUFFER}
    CURSOR=${#new_left}
  fi
}
zle -N peco-gem

##########################
# toggl-todoist commands #
##########################

function toggl-start-todoist () {
    local selected_item_id=`todoist --namespace --project-namespace list | peco | cut -d ' ' -f 1`
    if [ ! -n "$selected_item_id" ]; then
        return 0
    fi
    local selected_item_content=`todoist --csv show ${selected_item_id} | grep Content | cut -d',' -f2- | sed s/\"//g`
    if [ -n "$selected_item_content" ]; then
        BUFFER="toggl start \"${selected_item_content}\""
        CURSOR=$#BUFFER
        zle accept-line
    fi
}
zle -N toggl-start-todoist
bindkey '^xts' toggl-start-todoist

#################################################
## various functions
#################################################

mkcd () {
    mkdir -p $1 && cd $1
}

# mkdir & cd on ghq directory
# prepare: git config --global user.account sachaos
mkdev () {
    local dir=$(ghq root)/github.com/$(git config user.account)/$1
    mkdir -p $dir && cd $dir
}

# enterでいろいろ表示させるようにする
function do-enter-pwd-and-ls-and-git-status () {
    echo
    pwd
    echo -e "\e[0;33m--- files ---\e[0m"
    ls
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    echo
    echo
}

function do-enter-pwd-and-ls-and-git-status-detail () {
    echo
    pwd
    echo -e "\e[0;33m--- files ---\e[0m"
    ls -a
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status
    fi
    echo
    echo
}

function do-enter-task-lists-and-working () {
    echo
    echo -e "\e[0;33m--- tasks ---\e[0m"
    todoist --project-namespace --namespace --color list
    echo
    echo -e "\e[0;33m--- current task ---\e[0m"
    toggl --cache current
    echo
    echo
}

function do_enter () {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    if [ "$WIDGET" != "$LASTWIDGET" ]; then
        MY_ENTER_COUNT=0
    fi
    case $[MY_ENTER_COUNT++] in
        0)
            do-enter-pwd-and-ls-and-git-status
            ;;
        1)
            do-enter-pwd-and-ls-and-git-status-detail
            ;;
        *)
            unset MY_ENTER_COUNT
            ;;
    esac
    zle reset-prompt
    return 0
}
zle -N do_enter
bindkey '^m' do_enter
